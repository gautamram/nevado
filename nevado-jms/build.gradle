import com.amazonaws.auth.AWSCredentialsProviderChain
import com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider
import com.amazonaws.auth.SystemPropertiesCredentialsProvider
import com.amazonaws.auth.profile.ProfileCredentialsProvider

group 'com.oneviewcommerce'
version '1.3.2.3'

buildscript {

    def awsCoreVersion = '1.11.51'

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath(
                "com.amazonaws:aws-java-sdk-core:$awsCoreVersion",
                'com.github.jengelman.gradle.plugins:shadow:1.2.4'
        )
    }
}

def awsCredentials = new AWSCredentialsProviderChain(
        new EnvironmentVariableCredentialsProvider(),
        new SystemPropertiesCredentialsProvider(),
        new ProfileCredentialsProvider("ovc"),
        new ProfileCredentialsProvider(),
        new EC2ContainerCredentialsProviderWrapper()
).credentials

def springVersion = '3.0.5.RELEASE'

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'

sourceCompatibility = 1.8

repositories {
    maven {
        url 'https://repository.jboss.org/nexus/content/groups/public/'
    }
    mavenCentral()
}

def relocationPrefix = 'com.oneviewcommerce.shade.nevado.'

jar.enabled = false

shadowJar {
    baseName = "nevado-shaded"
     classifier = null
    excludes = ['com/amazonaws/services/sqs/request.handler*', 'com/amazonaws/services/sns/request.handler*']
    relocate 'com', "${relocationPrefix}com"
    relocate 'org.apache', "${relocationPrefix}org.apache"
    relocate 'org.codehaus', "${relocationPrefix}org.codehaus"
    relocate 'org.joda', "${relocationPrefix}org.joda"
    relocate 'org.json', "${relocationPrefix}org.json"
}

publishing {
    publications {
        shadow(MavenPublication) {

            artifactId 'nevado-shaded'

            from components.shadow
        }
    }

    repositories {
        maven {
            url "s3://ovc-gradle-repo/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            credentials(AwsCredentials) {
                accessKey awsCredentials.AWSAccessKeyId
                secretKey awsCredentials.AWSSecretKey
            }
        }
    }

}

dependencies {
    compile "javax.jms:jms:1.1"
    compile "commons-codec:commons-codec:1.8"
    compile "commons-httpclient:commons-httpclient:3.1"
    compile "commons-logging:commons-logging:1.1.1"
    compile "commons-lang:commons-lang:2.5"
    compile "com.caucho:hessian:4.0.7"
    compile "org.json:json:20090211"
    compile "org.codehaus.jackson:jackson-core-asl:1.9.12"
    compile "joda-time:joda-time:2.2"
    testCompile "log4j:log4j:1.2.17"
    compile "com.amazonaws:aws-java-sdk:1.10.28"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.springframework:spring-core:$springVersion"
    testCompile "org.springframework:spring-beans:$springVersion"
    testCompile "org.springframework.integration:spring-integration-jms:2.0.0.RELEASE"
    testCompile "activemq:activemq:3.1"
    testCompile "com.sun.messaging.mq:fscontext:4.4"
    testCompile "junit:junit:4.10"
}
